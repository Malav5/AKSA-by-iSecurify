import React from 'react';

const badgeColors = {
  Critical: 'bg-pink-100 text-pink-700 border-pink-200',
  High: 'bg-red-100 text-red-700 border-red-200',
  Medium: 'bg-yellow-100 text-yellow-700 border-yellow-200',
  Low: 'bg-emerald-100 text-emerald-700 border-emerald-200',
  Unknown: 'bg-gray-100 text-gray-700 border-gray-200',
};

const VulnerabilityDetail = ({ vulnerability, onClose }) => {
  if (!vulnerability) return null;
  const v = vulnerability._source;
  const severity = v.vulnerability?.severity || 'Unknown';

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center px-4 bg-gray-900/40 backdrop-blur-sm">
      <div className="bg-white backdrop-blur-lg rounded-2xl shadow-2xl w-full max-w-5xl max-h-[90vh] overflow-hidden flex flex-col border border-gray-200">
        {/* Header */}
        <div className="sticky top-0 bg-white/50 backdrop-blur-lg px-8 py-5 flex justify-between items-center shadow-sm z-10">
          <h2 className="text-3xl font-bold text-red-600 tracking-tight flex items-center gap-4">
            {v.vulnerability?.id || 'Vulnerability Detail'}
            <span className={`inline-block px-3 py-1 rounded-full border text-sm font-semibold ${badgeColors[severity] || badgeColors.Unknown}`}>{severity}</span>
          </h2>
          <button
            onClick={onClose}
            className="w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-red-100 text-gray-600 hover:text-red-600 text-2xl font-bold transition shadow-sm border border-gray-200"
            aria-label="Close"
          >
            Ã—
          </button>
        </div>

        {/* Content */}
        <div className="overflow-y-auto p-8 space-y-8 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-hide">
          {[{
            title: 'Vulnerability Info',
            content: (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-2">
                <Item label="Title" value={v.vulnerability?.title} />
                <Item label="Description" value={v.vulnerability?.description} />
                <Item label="Score" value={`${v.vulnerability?.score?.base || 'N/A'} (CVSS v${v.vulnerability?.score?.version || '-'})`} />
                <Item label="Category" value={v.vulnerability?.category} />
                <Item label="Classification" value={v.vulnerability?.classification} />
                <Item label="CVE ID" value={v.vulnerability?.id} />
                <Item label="Published At" value={v.vulnerability?.published_at} />
                <Item label="Detected At" value={v.vulnerability?.detected_at} />
                <Item label="Under Evaluation" value={<StatusBadge value={v.vulnerability?.under_evaluation ? 'Yes' : 'No'} />} />
              </div>
            )
          }, {
            title: 'Scanner Details',
            content: (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-2">
                <Item label="Source" value={v.vulnerability?.scanner?.source} />
                <Item label="Vendor" value={v.vulnerability?.scanner?.vendor} />
                <Item label="Condition" value={v.vulnerability?.scanner?.condition} />
                <Item label="Reference" value={
                  <a href={v.vulnerability?.scanner?.reference} target="_blank" rel="noreferrer" className="text-blue-600 underline break-all">
                    {v.vulnerability?.scanner?.reference}
                  </a>
                } />
              </div>
            )
          }, {
            title: 'External References',
            content: (
              <ul className="list-disc pl-5 space-y-1 text-blue-600">
                {(v.vulnerability?.reference?.split(', ') || []).map((ref, i) => (
                  <li key={i}>
                    <a href={ref} target="_blank" rel="noreferrer" className="underline break-all">{ref}</a>
                  </li>
                ))}
              </ul>
            )
          }, {
            title: 'Package Information',
            content: (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-2">
                <Item label="Name" value={v.package?.name} />
                <Item label="Version" value={v.package?.version} />
                <Item label="Architecture" value={v.package?.architecture} />
                <Item label="Type" value={v.package?.type} />
                <Item label="Path" value={v.package?.path} />
              </div>
            )
          }, {
            title: 'Agent Information',
            content: (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-2">
                <Item label="Name" value={v.agent?.name} />
                <Item label="ID" value={v.agent?.id} />
                <Item label="Type" value={v.agent?.type} />
                <Item label="Version" value={v.agent?.version} />
              </div>
            )
          }, {
            title: 'Operating System',
            content: (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-2">
                <Item label="Full" value={v.host?.os?.full} />
                <Item label="Name" value={v.host?.os?.name} />
                <Item label="Platform" value={v.host?.os?.platform} />
                <Item label="Version" value={v.host?.os?.version} />
              </div>
            )
          }, {
            title: 'Wazuh Details',
            content: (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-2">
                <Item label="Cluster Name" value={v.wazuh?.cluster?.name} />
                <Item label="Schema Version" value={v.wazuh?.schema?.version} />
              </div>
            )
          }].map(({ title, content }, idx, arr) => (
            <section key={idx} className="bg-white/90 rounded-xl shadow p-6 mb-2 border border-gray-100">
              <h3 className="text-xl font-bold text-gray-800 mb-4 tracking-tight flex items-center gap-2">{title}</h3>
              <div className="space-y-2">{content}</div>
              {idx < arr.length - 1 && <div className="mt-6 border-t border-gray-200" />}
            </section>
          ))}
        </div>
      </div>
    </div>
  );
};

// Reusable label-value component
const Item = ({ label, value }) => (
  <p className="text-gray-700 text-sm mb-1">
    <span className="font-semibold text-gray-900">{label}:</span>{' '}
    <span className="text-gray-800">{value || 'N/A'}</span>
  </p>
);

// Status badge for Yes/No
const StatusBadge = ({ value }) => (
  <span className={`inline-block px-2 py-0.5 rounded-full text-xs font-semibold border ${value === 'Yes' ? 'bg-green-100 text-green-700 border-green-200' : 'bg-gray-100 text-gray-500 border-gray-200'}`}>{value}</span>
);

export default VulnerabilityDetail;
